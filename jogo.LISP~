;; ===============================================================================================================================
;; ========================================= CÓDIGO REFERENTE AO JOGO DO CAVALO ================================================== 
;; ===============================================================================================================================
;;;; jogo.lisp
;;;; Disciplina de IA - 2019 / 2020
;;;; Projeto 2
;;;; Autores: Sara Batista [nº 170221054] e Carolina Castilho [nº 180221071]


;;======================================================================================
;;                                 ESTRUTURA DO NÓ 
;;======================================================================================        
;;          ESTADO (TABULEIRO + PONTUAÇÃO_CAVALO_BRANCO + PONTUAÇÃO_CAVALO_PRETO + JOGADOR)
;;    NÓ =>  
;;          PROFUNDIDADE
;;           



;;; ======================
;;;    CONSTANTES
;;; ======================
(defparameter *Jogador1* -1)  ; Cavalo branco
(defparameter *Jogador2* -2)  ; Cavalo preto


;;; ======================
;;;    CONSTRUTOR
;;; ======================
(defun cria-no (estado &optional (g 0))
  (list estado g)
)


;;; ========================================================
;;;                    MÉTODOS SELETORES
;;; ========================================================


;;; ======================
;;;   Vocabulário LISP 
;;; ======================

(defun no-estado(no)
  (first no)
)

(defun no-tabuleiro(estado)
  (first estado)
)

(defun no-pontos-cavalo-branco(estado)
  (second estado)
)

(defun no-pontos-cavalo-preto(estado)
  (third estado)
)

(defun no-jogador(estado)
  (fourth estado)
)

(defun no-profundidade(no)
  (second no)
)



;;; ===============================================
;;;       FUNÇÕES AUXILIARES DA PROCURA
;;; ===============================================

;;; ===========================
;;;    Posições no tabuleiro
;;; ===========================

(defun linha (indice tabuleiro)
"Retorna uma lista que representa a linha no tabuleiro recebido"  
  (cond 
   ((equal indice 0) (car tabuleiro))
   (T (linha (- indice 1)  (cdr tabuleiro)))))


(defun celula (n x tabuleiro)
"Retorna o valor presente na celula no tabuleiro, representada pelos dois indices"
(cond
 ((or (null n) (null x)) nil)
 ((or (< n 0) (< x 0)) nil)
 (t (nth x (nth n tabuleiro)))))


(defun procura-celula (valor tabuleiro &optional (indiceL 0) (indiceC 0))
  "Retorna a celula "
  (cond
   ((null tabuleiro) nil)
   ((equal (celula 0 0 tabuleiro) (+ (* (mod valor 10) 10) (floor valor 10))) (list indiceL indiceC))
   (t 
      (cond
       ((null (car tabuleiro)) (procura-celula valor (cdr tabuleiro) (+ indiceL 1) 0))
       (t (procura-celula valor (cons (cdr (car tabuleiro)) (cdr tabuleiro)) indiceL (+ indiceC 1)))))))



(defun procura-duplo (tabuleiro &optional (indiceL 0) (indiceC 0) (indiceL-duplo (- 1)) (indiceC-duplo (- 1)) (duplo (- 1)))
  "Função que procura o duplo ..."
  (cond
   ((null tabuleiro) (list indiceL-duplo  indiceC-duplo))
   ((null (car tabuleiro)) (procura-duplo (cdr tabuleiro) (+ indiceL 1) 0 indiceL-duplo indiceC-duplo duplo))
   ((null (car (car tabuleiro))) (procura-duplo (cons (cdr (car tabuleiro)) (cdr tabuleiro)) indiceL (+ indiceC 1) indiceL-duplo indiceC-duplo duplo))
   (t (let* ((valor-celula (car (car tabuleiro)))
             (valor-duplo (verifica-duplo valor-celula)))
         (cond
          ((and valor-duplo (> valor-celula duplo) (> valor-celula 0)) (procura-duplo (cons (cdr (car tabuleiro)) (cdr tabuleiro)) indiceL (+ indiceC 1) indiceL indiceC valor-celula)) 
          (t (procura-duplo (cons (cdr (car tabuleiro)) (cdr tabuleiro)) indiceL (+ indiceC 1) indiceL-duplo indiceC-duplo duplo)))))))
      


(defun verifica-duplo (numero)                                           
  (cond 
   ((equal numero nil) nil)
   ((< numero 0) nil)
   (t (equal (mod numero 10) (floor numero 10)))
   )
  )


(defun substituir-posicao (indice lista &optional (valor nil))
  "Função auxiliar para substituir uma posição da lista por um dado valor (por default é nil) "
  (cond
   ((equal indice 0) (cons valor (rest lista)))
   (t (cons (car lista) (substituir-posicao  (- indice 1) (cdr lista) valor)))
   )
  )


(defun substituir (indiceL indiceC tabuleiro &optional (valor nil))
  "Função para substituir uma posição do tabuleiro por um valor (por default é nil)"
  (cond 
   ((equal indiceL 0) (cons (substituir-posicao indiceC (car tabuleiro) valor) (rest tabuleiro)))
   (t (cons (car tabuleiro) (substituir (- indiceL 1) indiceC (rest tabuleiro) valor)))
   )
  )


(defun posicao-cavalo (tabuleiro jogador &optional (indiceL 0) (indiceC 0))
  "Função que devolve a posição do cavalo, dependendo de qual o jogador que está a jogar"
  (cond
   ((null tabuleiro) nil)
   ((equal (celula 0 0 tabuleiro) jogador) (list indiceL indiceC))
   (t 
    (cond
     ((null (car tabuleiro)) (posicao-cavalo (cdr tabuleiro) jogador (+ indiceL 1) 0))
     (t (posicao-cavalo (cons (cdr (car tabuleiro)) (cdr tabuleiro)) jogador indiceL (+ indiceC 1))))
    )
   )
  )



;;; =====================================
;;;     Gerar um tabuleiro aleatório
;;; =====================================

(defun lista-numeros (&optional (n 100))
  "Cria uma lista com todos os números entre 0 (inclusive) e n (exclusive)"
  (cond
   ((equal n 1) (list 0))
   (T (cons (- n 1) (lista-numeros (- n 1))))
   )
  )


(defun remover-se (pred lista)
  "Remove um valor que já exista no tabuleiro"
  (cond 
   ((null lista) nil)
   ((funcall pred (car lista)) (remover-se pred (cdr lista)))
   (t (cons (car lista) (remover-se pred (cdr lista))))
   )
  )


(defun baralhar (lista)
  "Baralha a lista"
  (cond
   ((null lista) nil)
   (t (let ((numero-aleatorio  (nth (random (length lista)) lista)))
              (cons numero-aleatorio (baralhar(remover-se  (lambda (x) (= x numero-aleatorio))  lista)))))
   )
  )


(defun tabuleiro-aleatorio (lista n) 
  "Função que gera um tabuleiro aleatório"
  (cond    
   ((null lista) nil)    
   (t (cons (subseq lista 0 n) (tabuleiro-aleatorio (subseq lista n) n)))
   )
  )



;;; =========================
;;;     Funções sucessores
;;; =========================

(defun novo-sucessor (no operador)
  "Função auxiliar: aplica um operador e gera o respetivo sucessor"
  (cond 
   ((null operador) nil)
   (t (let ((estado-no (funcall operador (no-estado no))))
        (cond
         ((equal estado-no nil) nil)
         (t (cria-no estado-no (+ (no-profundidade no) 1)))))
      )
   )
  )


(defun sucessores (no operadores)
  "Função para gerar os sucessores de um nó, aplicando os operadores"
  (let ((sucessor (novo-sucessor no (car operadores))))
   (cond
     ((null operadores) nil)

     ((equal sucessor nil) (sucessores no (rest operadores)))

     (t (cons (novo-sucessor no (car operadores)) (sucessores no (rest operadores))))
     )
   )
  )


;;; ========================
;;;  OPERADORES DO PROBLEMA
;;; ========================

(defun operadores ()
 "Cria uma lista com todos os operadores do problema"
 (list 'operador-1 'operador-2 'operador-3 'operador-4 'operador-5 'operador-6 'operador-7 'operador-8)
 )


(defun operador-1 (estado)
  (operador-default estado 2 (- 1))
  )

(defun operador-2 (estado)
  (operador-default estado 2 1 )
  )

(defun operador-3 (estado)
  (operador-default estado 1 2 )
  )

(defun operador-4 (estado)
  (operador-default estado (- 1) 2)
  )

(defun operador-5 (estado)
  (operador-default estado (- 2) 1 )
  )

(defun operador-6 (estado)
  (operador-default estado (- 2) (- 1))
  )

(defun operador-7 (estado)
  (operador-default estado (- 1) (- 2))
  )

(defun operador-8 (estado)
  (operador-default estado 1 (- 2))
  )


(defun operador-default (estado L C)
  "Função que aplica os operadores ao estado do nó"
  (cond 
   ((and (equal (+ (first (posicao-cavalo (no-tabuleiro estado) (no-jogador estado))) L) nil) (equal (+ (second (posicao-cavalo (no-tabuleiro estado) (no-jogador estado))) C) nil)) nil)

   (t
    (let* ((tabuleiro (no-tabuleiro estado))
           (valor-cavalo (celula (+ (first (posicao-cavalo tabuleiro (no-jogador estado))) L) (+ (second (posicao-cavalo tabuleiro (no-jogador estado))) C) tabuleiro)))
      (cond 
       ((null valor-cavalo) nil)
       ((equal valor-cavalo (jogador-oposto (no-jogador estado))) nil)
       (t 
        (let* (
               (posicao (posicao-cavalo tabuleiro (no-jogador estado)))
               (simetrico (procura-celula valor-cavalo tabuleiro))
               (linha-celula-simetrico (first simetrico))
               (coluna-celula-simetrico (second simetrico))
               (tabuleiro-nil (substituir (first posicao) (second posicao) tabuleiro))
               (tabuleiro-cavalo (substituir (+ (first posicao) L) (+ (second posicao) C) tabuleiro-nil (no-jogador estado)))
               (duplo (procura-duplo tabuleiro-cavalo))
               (linha-celula-duplo (first duplo))
               (coluna-celula-duplo (second duplo))
               (tabuleiro-nil (substituir (first posicao) (second posicao) tabuleiro))
               )
          (cond
           
           ((equal (no-jogador estado) *Jogador1*)
            (cond
             ((> (+ (first posicao) L) (length tabuleiro)) nil)
             ((> (+ (second posicao) C) (length (car tabuleiro))) nil)
             ((verifica-duplo valor-cavalo) (list (substituir linha-celula-duplo coluna-celula-duplo tabuleiro-cavalo) (+ (no-pontos-cavalo-branco estado) valor-cavalo) (no-pontos-cavalo-preto estado) *Jogador2*))
             ((or (null linha-celula-simetrico) (null coluna-celula-simetrico)) (list (substituir (+ (first posicao) L) (+ (second posicao) C) tabuleiro-nil (no-jogador estado)) (+ (no-pontos-cavalo-branco estado) valor-cavalo) (no-pontos-cavalo-preto estado) *Jogador2*))
             (t (list (substituir linha-celula-simetrico coluna-celula-simetrico tabuleiro-cavalo) (+ (no-pontos-cavalo-branco estado) valor-cavalo) (no-pontos-cavalo-preto estado) *Jogador2*))))
           
           ((equal (no-jogador estado) *Jogador2*) 
            (cond
             ((> (+ (first posicao) L) (length tabuleiro)) nil)
             ((> (+ (second posicao) C) (length (car tabuleiro))) nil)
             ((verifica-duplo valor-cavalo) (list (substituir linha-celula-duplo coluna-celula-duplo tabuleiro-cavalo) (no-pontos-cavalo-branco estado) (+ (no-pontos-cavalo-preto estado) valor-cavalo) *Jogador1*))
             ((or (null linha-celula-simetrico) (null coluna-celula-simetrico)) (list (substituir (+ (first posicao) L) (+ (second posicao) C) tabuleiro-nil (no-jogador estado)) (no-pontos-cavalo-branco estado) (+ (no-pontos-cavalo-preto estado) valor-cavalo) *Jogador1*))
             (t (list (substituir linha-celula-simetrico coluna-celula-simetrico tabuleiro-cavalo) (no-pontos-cavalo-branco estado) (+ (no-pontos-cavalo-preto estado) valor-cavalo) *Jogador1*))))
           (T nil))))))))
  )




;;======================================================================================
;;                "OPERADOR 0" (Posicionar os cavalos no inicio do jogo)
;;======================================================================================        

(defun encontrar-maximo-lista (lista &optional (maximo 0))
  "Função que devolve o valor máximo da lista"
  (cond
      ((null lista) maximo)
      ((equal (first lista) nil) (encontrar-maximo-lista (rest lista) maximo))
      ((> (first lista) maximo) (encontrar-maximo-lista (rest lista) (first lista)))
      (t (encontrar-maximo-lista (rest lista) maximo))
      )
  )

(defun obter-indice-do-valor-maximo (lista &optional (count 0))
  "Função que devolve o indice da coluna onde está o valor máximo"
  (cond
     ((null lista) nil)
     ((equal (first lista) (encontrar-maximo-lista lista)) count)
     (t (obter-indice-do-valor-maximo (rest lista) (1+ count)))
  )
)

(defun colocar-cavalo-branco (tabuleiro)
  "Função que devolve o tabuleiro com o cavalo branco na posição com maior valor da linha 1"
  (substituir 0 (obter-indice-do-valor-maximo (linha 0 tabuleiro)) tabuleiro *Jogador1*)
)

(defun pontuação-inicial-cavalo-branco (tabuleiro)
  "Função que devolve a pontuação inicial do cavalo branco (valor da maior casa da 1ª linha)"
  (celula 0 (obter-indice-do-valor-maximo (linha 0 tabuleiro)) tabuleiro)
)

(defun colocar-cavalo-preto (tabuleiro)
  "Função que devolve o tabuleiro com o cavalo preto na posição com maior valor da linha 10"
  (substituir 9 (obter-indice-do-valor-maximo (linha 9 tabuleiro)) tabuleiro *Jogador2*)
)

(defun pontuação-inicial-cavalo-preto (tabuleiro)
  "Função que devolve a pontuação inicial do cavalo preto (valor da maior casa da 10ª linha)"
  (celula 9 (obter-indice-do-valor-maximo (linha 9 tabuleiro)) tabuleiro)
)

(defun posicionar-jogadores-no-tabuleiro (tabuleiro jogador)
  "Função que cria o nó inicial com o tabuleiro e aplica as funções para colocar os cavalos no inicio do jogo"
  (list (colocar-cavalo-preto (colocar-cavalo-branco tabuleiro)) (pontuação-inicial-cavalo-branco tabuleiro) (pontuação-inicial-cavalo-preto tabuleiro) jogador)
    ; jogador 1  =>  -1  =>   cavalo branco
    ; jogador 2  =>  -2  =>   cavalo preto
  )




;;======================================================================================
;;                                 JOGAR 
;;======================================================================================        

(defun jogar (no tempo primeiro-jogador) 
  (set-tempo-permitido (- tempo 100))
  (cond 
   ((equal primeiro-jogador -1) (jogada-humano no *Jogador1*))
   (t (jogada-computador no *Jogador1*))
   )
  )


;;======================================================================================
;;                                 JOGADA HUMANO
;;======================================================================================        


(defun jogada-humano (no jogador)
  (cond
   ((equal (terminou-jogo no) T) (vencedor no))
   (T
    (let* ((posicoes (posicoes-validas no))
           (estado (no-estado no)))
      (escrever-estado t (no-estado no))
      (escreve-posicoes-validas posicoes)
    
      (cond 
       ((and (equal jogador *Jogador1*) (equal posicoes nil)) (jogada-computador (list (list (no-tabuleiro estado) (no-pontos-cavalo-branco estado) (no-pontos-cavalo-preto estado) (jogador-oposto jogador)) 0) *Jogador2*))
       ((and (equal jogador *Jogador2*) (equal posicoes nil)) (jogada-computador (list (list (no-tabuleiro estado) (no-pontos-cavalo-branco estado) (no-pontos-cavalo-preto estado) (jogador-oposto jogador)) 0) *Jogador1*))
       (t 
        (format t "~%~%Introduza a linha e a coluna onde pretende colocar a peça: ~%")
        (format t "<letra> <numero de 1 a 10> ~%")
        (let* ((numero (read))
               (linha (floor numero 10))
               (coluna (mod numero 10))
               )
         
          (cond
          
           ((and (equal jogador *Jogador1*) (movimento-válido linha coluna posicoes (no-tabuleiro estado)) (let ((jogada_aux1 (list (colocar-peca linha coluna estado) 0))) 
                                                                                                             (jogada-computador jogada_aux1 *Jogador2*) ; manda a jogada ao adversário
                                                                                                             )))
           ((and (equal jogador *Jogador2*) (movimento-válido linha coluna posicoes (no-tabuleiro estado)) (let ((jogada_aux2 (list (colocar-peca linha coluna estado) 0)))
                                                                                                             (jogada-computador jogada_aux2 *Jogador1*) ; manda a jogada ao adversário
                                                                                                             )))
           (T  (format t "Movimento inválido! Escolha outra posição. ~%") (jogada-humano no jogador))
           )
          )
        )
       )
      )
    )
   )
  )


;;=================================================
;;     FUNÇÕES AUXILIARES À JOGADA HUMANO
;;=================================================

(defun jogador-oposto (jogador)
 "Função para se obter o jogador oposto"
  (cond
   ((equal jogador *Jogador2*) *Jogador1*)
   ((equal jogador *Jogador1*) *Jogador2*)
   )
  )


(defun colocar-peca (linha coluna estado) 
  "Função que move a peça para a casa pretendida e altera a respetiva pontuação"
  (let* ((posicao-atual (posicao-cavalo (no-tabuleiro estado) (no-jogador estado)))
         (linha-atual (first posicao-atual))
         (coluna-atual (second posicao-atual))
         (indiceL (- linha linha-atual))
         (indiceC (- coluna coluna-atual)))
    (operador-default estado indiceL indiceC)
    )
  )
    

;;============================================
;;  Funções de verificação do estado do jogo
;;============================================

(defun terminou-jogo (no)
  "Função para verificar se o jogo já terminou"
  (let* ((estado (no-estado no))
        (sucessores-um (obter-posicoes-validas (sucessores no (operadores))))
        (sucessores-dois (obter-posicoes-validas (sucessores (list (list (no-tabuleiro estado) (no-pontos-cavalo-branco estado) (no-pontos-cavalo-preto estado) (jogador-oposto (no-jogador estado))) 0) (operadores)))))
    (cond
     ((and (null sucessores-um) (null sucessores-dois)) T)
     (t nil)
     )
    )
  )


(defun vencedor (no)
  "Função para determinar quem é o vencedor"
  (let* ((estado (no-estado no)))
    (cond
     ((> (no-pontos-cavalo-branco estado) (no-pontos-cavalo-preto estado)) (format t "~%------------------------------------- FIM DO JOGO -------------------------------------")(format t "~%Vencedor: Cavalo Branco ~%" )(format t"~%Pontos do cavalo branco: ~A~%" (no-pontos-cavalo-branco estado)) (format t"~%Pontos do cavalo preto: ~A~%" (no-pontos-cavalo-preto estado)) (escrever-tabuleiro t (no-tabuleiro estado)))
     ((< (no-pontos-cavalo-branco estado) (no-pontos-cavalo-preto estado)) (format t "~%------------------------------------- FIM DO JOGO -------------------------------------")(format t "~%Vencedor: Cavalo Preto ~%")(format t "~%Pontos do cavalo branco: ~A~%" (no-pontos-cavalo-branco estado)) (format t"~%Pontos do cavalo preto: ~A~%" (no-pontos-cavalo-preto estado))(escrever-tabuleiro t (no-tabuleiro estado)))
     (t (format t "Empate! ~%"))
     )
    )
  )


;;==============================================================
;;  Funções de validação do movimento do cavalo do utilizador
;;==============================================================

(defun movimento-válido (linha coluna posicoes-validas tabuleiro)
  "Verifica se é possível aplicar algum operador de modo a colocar o cavalo na posição que o utilizador pretende"
  (cond
   ((or (< coluna 0) (< linha 0) (>= linha (length tabuleiro)) (>= coluna (length (car tabuleiro)))) nil) ; verifica se está dentro dos limites do tabuleiro
   ((verificar-operador-possivel posicoes-validas linha coluna) t) ; verifica se se podem aplicar operadores
   (t nil)
   )
  )

(defun verificar-operador-possivel (posicoes-validas linha coluna)
  "Função para verificar se é possível aplicar o operador"
  (cond
   ((null posicoes-validas) nil)
   ((and (equal linha (first (first posicoes-validas))) (equal coluna (second (first posicoes-validas)))) t)
   (t (verificar-operador-possivel (rest posicoes-validas) linha coluna))))


(defun posicoes-validas (no) 
  "Devolve todas as posições válidas para mover o cavalo"
  (obter-posicoes-validas (sucessores no (operadores)))
 
 )


(defun obter-posicoes-validas (possiveis-sucessores)
  "Devolve uma lista com os indices das posições possíveis"
  (let* ((first (first possiveis-sucessores))
         (estado (no-estado first)))
    (cond
     ((null possiveis-sucessores) nil)
     (t (cons (posicao-cavalo (no-tabuleiro estado) (jogador-oposto (no-jogador estado))) (obter-posicoes-validas (rest possiveis-sucessores))))
     )
    )
  )


(defun escreve-posicoes-validas (posicoes-validas)
  "Escreve a lista com os indices das posições válidas"
  (cond 
   ((null posicoes-validas) (format  t "~%Ups... Não há jogadas possíveis...:( ~%"))
   (t (format t "~%Jogadas Possiveis: ~%~A~%" posicoes-validas))))



;;======================================================================================
;;                                 JOGADA COMPUTADOR
;;======================================================================================        
(defun metricas ()
  (format t "~%---Métricas---~%")
  (format t "~%Nós Analisados: ~%~A~%" (get-nos-analisados))
  (format t "~%Cortes Beta: ~%~A~%" (get-cortes-beta))
  (format t "~%Cortes Alfa: ~%~A~%" (get-cortes-alfa))
  (format t "~%Tempo da jogada: ~%~A~%" (get-tempo-jogada))
  (format t "~%--------------~%"))


(defun jogada-computador (no jogador)
  (cond
   ((equal (terminou-jogo no) T) (vencedor no))
   (t 
  (let ((estado (no-estado no)))
    (cond
     ((equal jogador -1) (let ((jogada_aux (negamax-inicial no 25 1)))
                           (cond 
                            ((null jogada_aux) (jogada-humano (list (list (no-tabuleiro estado) (no-pontos-cavalo-branco estado) (no-pontos-cavalo-preto estado) (jogador-oposto jogador)) 0) *Jogador2*))
                            (t (metricas) (jogada-humano jogada_aux *Jogador2*)  ; manda a jogada ao adversário
                               ))))
         
     ((equal jogador -2) (let* ((jogada_aux2 (negamax-inicial no 25 1)))
                           (cond 
                            ((null jogada_aux2) (jogada-humano (list (list (no-tabuleiro estado) (no-pontos-cavalo-branco estado) (no-pontos-cavalo-preto estado) (jogador-oposto jogador)) 0) *Jogador1*))
                            (t (metricas)(jogada-humano jogada_aux2 *Jogador1*)  ; manda a jogada ao adversário
                            ))))
     (t nil)
     )
    ))))

(defun jogada-computador-computador (no jogador)
  (cond
   ((equal (terminou-jogo no) T) (vencedor no))
   (t 
  (let ((estado (no-estado no)))
    
    (cond
     ((equal jogador -1) (let ((jogada_aux (negamax-inicial no 25 1)))
                           (format t"~%----------------------------------------------------------------------------------------~%")
      (escrever-estado t (no-estado no))
                           (cond 
                            ((null jogada_aux) (jogada-computador-computador (list (list (no-tabuleiro estado) (no-pontos-cavalo-branco estado) (no-pontos-cavalo-preto estado) (jogador-oposto jogador)) 0) *Jogador2*))
                            (t (metricas) (jogada-computador-computador jogada_aux *Jogador2*) ; manda a jogada ao adversário
                               ))))
         
     ((equal jogador -2) (let* ((jogada_aux2 (negamax-inicial no 25 1)))

                           (cond 
                            ((null jogada_aux2) (jogada-computador-computador (list (list (no-tabuleiro estado) (no-pontos-cavalo-branco estado) (no-pontos-cavalo-preto estado) (jogador-oposto jogador)) 0) *Jogador1*))
                            (t (metricas) (jogada-computador-computador jogada_aux2 *Jogador1*)) ; manda a jogada ao adversário
                            )))
     (t nil)
     )
    ))))


(defun calcular-profundidade (tempo)
  "Função para calcular a profundidade máxima tendo como base o tempo limite"
  ;(alterar-profundidade (/ (* (/ tempo 2) 10) "tempo"))
)



;;======================================================================================
;;                                 FUNÇÕES DE AVALIAÇÃO
;;======================================================================================        

(defun funcao-avaliacao-nos-folha (pontos-jogador1 pontos-jogador2) ; (jogada => estado (tabuleiro + pontuação) + )
  (cond
   ((> pontos-jogador1 pontos-jogador2) 1) ; ganha jogador 1 / perde jogador 2
   ((equal pontos-jogador1 pontos-jogador2) 0) ; empate
   (t -1) ; perde jogador 1 / ganha jogador 2
   )
  )

(defun funcao-avaliacao-pseudo-nos-folha (pontos-jogador1 pontos-jogador2)
  ; max pontos = 4950
  (/ (* 0.99 (- pontos-jogador2 pontos-jogador1)) 4950)
  )




;;======================================================================================
;;                                 ESCRITA DOS DADOS
;;======================================================================================        


(defun escrever-tabuleiro (f tabuleiro)
  ;(format f "~%Tabuleiro: ~%")
  (cond
   ((null tabuleiro) 'teste)
   (t (escrever-linha-tabuleiro f (car tabuleiro)) (escrever-tabuleiro f (cdr tabuleiro))))
   )
  


(defun escrever-linha-tabuleiro (f linha)
  (cond
   ((null linha) (format t "~%")nil)
   (t (format f "~3A|" (car linha)) (escrever-linha-tabuleiro f (cdr linha)))
  ))



(defun escrever-pontuacao-cavalo-branco (f pontos)
  (format f "~%~%Pontuação cavalo branco: ~%~A~%" pontos)
  )

(defun escrever-pontuacao-cavalo-preto (f pontos)
  (format f "~%Pontuação cavalo preto: ~%~A~%" pontos)
  )

(defun escrever-estado (f estado)
  (escrever-tabuleiro f (no-tabuleiro estado))
  (escrever-pontuacao-cavalo-branco f (no-pontos-cavalo-branco estado))
  (escrever-pontuacao-cavalo-preto f (no-pontos-cavalo-preto estado))
  )

(defun no-teste ()
 '((((42 65 63 -1 73 78 5 32 68 61) (86 30 82 80 28 75 45 50 81 90) (59 24 47 9 67 22 56 77 60 99) (41 62 18 85 76 27 13 94 93 70) (14 54 0 71 35 39 92 38 49 52) (83 11 46 6 48 15 23 88 96 8) (25 84 2 89 7 53 66 31 20 12) (37 19 3 36 10 44 64 16 97 33) (40 69 95 29 4 51 34 1 26 21) (72 79 -2 43 74 55 58 57 91 17)) 87 98 -1) 0))


