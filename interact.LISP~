;; ===============================================================================================================================
;;                                             INTERFACE COM UTILIZADOR  
;; ===============================================================================================================================
;;;; interact.lisp
;;;; Disciplina de IA - 2019 / 2020
;;;; Projeto 2
;;;; Autores: Sara Batista [nÂº 170221054] e Carolina Castilho [nÂº 180221078]


;; CARREGAR FICHEIROS

;(load "C:\\Users\\Carolina\\Desktop\\Projeto\\puzzle2.LISP")
;(load "C:\\Users\\Carolina\\Desktop\\Projeto\\procura2.LISP")
(load "C:\\Users\\sarab\\Documents\\Faculdade\\CURSO EI\\5º Semestre\\Inteligência Artificial\\Projeto2\\Scripts\\IA_Projeto2\\algoritmo.LISP")
(load "C:\\Users\\sarab\\Documents\\Faculdade\\CURSO EI\\5º Semestre\\Inteligência Artificial\\Projeto2\\Scripts\\IA_Projeto2\\jogo.LISP")

;;=========================================
;;      INPUT E LEITURA DE FICHEIROS  
;;=========================================

;;; InicializaÃ§Ã£o do programa
(defun iniciar ()
  
  ; Pergunta inicial
    (format t "Introduza o nÃºmero do problema que pretende testar [1 atÃ© 6]: ~%") ;; ~% -> mudar de linha  
  ; Ler ficheiro
   (with-open-file (f1 "C:\\Users\\Carolina\\OneDrive\\3ÂºAno\\IA\\Projeto\\problemas.dat" :direction :input) ;; ficheiro f1 -> problemas.dat 
      ;;(with-open-file (f2 "C:\\Users\\sarab\\Documents\\Faculdade\\CURSO EI\\5º Semestre\\Inteligência Artificial\\Projeto2\\Scripts\\IA_Projeto2\\log.dat" :direction :output) 
        (jogar (criar-no-inicial (ler-tabuleiro f1 (read))))
      )
)


;; Função para ler o tabuleiro do ficheiro
(defun ler-tabuleiro (f1 n)
  "Devolve uma lista que representa o tabuleiro de jogo"
  (cond 
   ((= n 1) (ler-tabuleiro1 f1))
   ((= n 2) (ler-tabuleiro2 f1))
   ((= n 3) (ler-tabuleiro3 f1))
   ((= n 4) (ler-tabuleiro4 f1))
   ((= n 5) (ler-tabuleiro5 f1))
   ((= n 6) (tabuleiro-aleatorio (baralhar (lista-numeros)) 10))
   )

  ;(cond 
   ; ((= n 1) (read f1))
    ;((= n 6) (tabuleiro-aleatorio (baralhar (lista-numeros)) 100))
    ;(t (cons (read f1) (ler-tabuleiro f1 (1- n))))
  ;)
)

(defun ler-tabuleiro1 (f1)
  "Devolve uma lista que representa o tabuleiro de jogo"
  (read f1)
)


(defun ler-tabuleiro2 (f1)
  "Devolve uma lista que representa o tabuleiro de jogo"
  (read f1)
  (read f1)
)

(defun ler-tabuleiro3 (f1)
  "Devolve uma lista que representa o tabuleiro de jogo"
  (read f1)
  (read f1)
  (read f1)
)

(defun ler-tabuleiro4 (f1)
  "Devolve uma lista que representa o tabuleiro de jogo"
  (read f1)
  (read f1)
  (read f1)
  (read f1)
)

(defun ler-tabuleiro5 (f1)
  "Devolve uma lista que representa o tabuleiro de jogo"
  (read f1)
  (read f1)
  (read f1)
  (read f1)
  (read f1)
)


;; Função para ler a profundidade
(defun ler-profundidade()
"Permite fazer a leitura da profundidade limite para o algoritmo dfs."
    (progn
    (format t "Qual a profundidade limite? ~%")
    (read)
    ))


;;=========================================
;;            INICIAR O JOGO  
;;=========================================

(defun escrever-cabecalho (f)
  (format f "~%=============================================================================~%")
  (format f "UC Inteligencia Artificial                               Ano letivo 2019/2020~%~%")
  (format f "Projeto realizado por:~%")
  (format f "   * Sara Batista, numero 170221054~%")
  (format f "   * Carolina Castilho, numero 180221078~%")
  (format f "~%=============================================================================~%~%")
 )

(defun menu ()
   (progn
    (escrever-cabecalho t)
    (format t "Selecione o modo de jogo: ~%")
    (format t "1 -> Humano vs Computador ~%")
    (format t "2 -> Computador vs Computador ~%")
    (let ((resposta (read)))
      (cond 
       ((= resposta 1) (humano-computador))
       (t (computador-computador))
       )
      )
    )
)

(defun humano-computador ()
  (progn
    (format t "~%Selecione o 1º jogador: ~%")
    (format t "1 -> Humano ~%")
    (format t "2 -> Computador ~%")
    (read) ; incompleto
    (format t "~%Indique o tempo limite para a jogada do computador: [segundos] ~%")
    (read) ; 1000 e 5000 milissegundos
    )
)


;;=========================================
;;                OUTPUT  
;;=========================================

;; Função para escrever o tabuleiro no final do jogo num ficheiro
(defun escrever-tabuleiro-final-jogo (tabuleiro f2)
  "Escreve no ficheiro a lista que representa o tabuleiro atualizado no final do jogo"
  (format f2 "~A" tabuleiro)
)

;; Funções para escrever as estatisticas num ficheiro




